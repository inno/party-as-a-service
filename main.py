import io
import random
from flask import Flask, render_template, request, send_file
from PIL import Image, ImageEnhance, UnidentifiedImageError
import PIL.ImageOps

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 1024 * 128


palettes = {
    "primary_smooth": (
        (0, 255, 0),  # Green
        (127, 255, 0),  # Green/Yellow
        (255, 255, 0),  # Yellow
        (255, 127, 0),  # Orange
        (255, 0, 0),  # Red
        (255, 0, 127),  # Red/pink
        (255, 0, 255),  # Pink
        (127, 0, 255),  # Purple
        (0, 0, 255),  # Blue
        (0, 127, 255),  # Teal/blue?
        (0, 255, 255),  # Teal
        (0, 255, 127),  # Blue/Green
    ),
    "party_parrot": (
        (255, 107, 107),
        (255, 107, 181),
        (255, 107, 181),
        (255, 105, 247),
        (255, 138, 255),
        (214, 140, 255),
        (140, 181, 255),
        (140, 255, 255),
        (140, 255, 140),
        (255, 214, 140),
        (252, 139, 138),
    ),
}


submit_values = (
    "Get crunk",
    "Drop it like it's hot",
    "Shake it like a Polaroid",
    "Crank it",
    "Work it",
    "Fight for your right",
    "Let the music take control",
    "Celebrate good times",
)


class UnknownPalette(Exception):
    pass


def partify(im,
            contrast=1.5,
            duration=100,
            invert=False,
            palette="primary_smooth",
            slack_resize=False,
            such_a_square=False):
    if palette not in palettes:
        raise UnknownPalette(palette)

    if slack_resize:
        im.thumbnail((128, 128))

    if invert is True:
        im = PIL.ImageOps.invert(im.convert(mode="RGB"))

    if such_a_square:
        so_boring = io.BytesIO()
        im.save(
            fp=so_boring,
            optimize=True,
            comment="Generated by partify",
            format="PNG",
        )
        return so_boring

    if len(im.split()) == 4:
        alpha = im.split()[3]
    else:
        alpha = Image.new("L", im.size, (255))
    if contrast is not None:
        print(f"mode: {im.mode}")
        im = ImageEnhance.Contrast(im.convert(mode="RGB")).enhance(contrast)
    single = im.convert(mode="L")
    gray = Image.new("RGB", im.size, (255, 255, 255))
    gray.paste(single.convert(mode="RGB"), mask=alpha)
    gray.putalpha(alpha)

    frames = []
    for color in palettes[palette]:
        c = Image.new("RGBA", im.size, color)
        c.putalpha(alpha)
        frames.append(
            Image.blend(gray, c, .5)
        )

    partytime = io.BytesIO()
    frames[0].save(
        fp=partytime,
        save_all=True,
        append_images=frames[1:],
        loop=0,
        transparency=0,
        duration=duration,
        optimize=True,
        comment="Generated by partify",
        format="GIF",
    )
    return partytime


@app.route("/")
def index():
    return render_template(
        "index.html",
        submit_value=random.choice(submit_values),
    )


def boolean(value):
    if value == "false":
        return False
    else:
        return True


@app.route("/partify", methods=["POST"])
def partify_endpoint():
    boring_file = request.files.get("boring")

    if boring_file is None:
        return "Can't partify from nothing!", 400

    contrast = request.form.get("contrast", 1.5)
    duration = request.form.get("duration", 100)
    invert = boolean(request.form.get("invert", "false"))
    slack_resize = boolean(request.form.get("slack_resize", "true"))
    such_a_square = boolean(request.form.get("such_a_square", "false"))

    try:
        contrast = float(contrast)
        duration = int(duration)
    except ValueError:
        return "Yeah, no thanks", 415

    try:
        boring_image = Image.open(fp=boring_file.stream)
    except UnidentifiedImageError:
        return "Sorry, I have no idea what this file is", 415
    lit_file = partify(
        boring_image,
        contrast=contrast,
        duration=duration,
        slack_resize=slack_resize,
        such_a_square=such_a_square,
        invert=invert,
    )
    lit_file.seek(0)
    return send_file(lit_file, mimetype="image/gif")


if __name__ == "__main__":
    app.run(debug=True)
